АННОТАЦИЯ
В этой статье представлена ​​ORB-SLAM, функциональная монокулярная система SLAM, работающая в реальном времени в малых и больших помещениях и на открытом воздухе. Система устойчива к серьезным помехам от движения, позволяет закрывать и перемещать широкий базовый цикл, а также включает в себя полную автоматическую инициализацию. Основываясь на превосходных алгоритмах последних лет, мы разработали с нуля новую систему, которая использует одни и те же функции для всех задач SLAM: отслеживание, отображение, перемещение и замыкание цикла. Стратегия выживания наиболее приспособленной, которая выбирает точки и ключевые кадры реконструкции, приводит к превосходной надежности и создает компактную и отслеживаемую карту, которая увеличивается только при изменении содержимого сцены, что позволяет работать в течение всей жизни. Мы представляем исчерпывающую оценку в 27 последовательностях из самых популярных наборов данных. ORB-SLAM обеспечивает беспрецедентную производительность по сравнению с другими современными монокулярными подходами SLAM. В интересах сообщества мы публикуем исходный код.
Картирование на протяжении всей жизни, локализация, монокулярное зрение, распознавание, SLAM
Этот документ был принят для публикации в IEEE Transactions on Robotics .
DOI: 10.1109 / TRO.2015.2463671
IEEE Xplore: http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7219438
© 2015 IEEE. Использование данного материала в личных целях разрешено. Разрешение от IEEE должно быть получено для всех других видов использования, на любых текущих или будущих носителях, включая перепечатку / переиздание этого материала в рекламных или рекламных целях, создание новых коллективных работ, для перепродажи или распространения на серверы или списки, или повторное использование любого защищенного авторским правом компонента этой работы в других работах.
я                  


ВВЕДЕНИЕ
Bundle Adjustment (BA), как известно, обеспечивает точные оценки местоположения камеры, а также разреженную геометрическую реконструкцию [ 1 , 2 ], учитывая, что обеспечивается сильная сеть совпадений и хорошие начальные предположения. Долгое время такой подход считался недоступным для приложений реального времени, таких как визуальная одновременная локализация и отображение (Visual SLAM). Визуальный SLAM имеет цель оценить траекторию камеры при реконструкции окружающей среды. В настоящее время мы знаем, что для достижения точных результатов при непомерно высоких вычислительных затратах алгоритм SLAM в реальном времени должен обеспечивать BA:
Соответствующие наблюдения за функциями сцены (точки карты) среди подмножества выбранных кадров (ключевых кадров).
Поскольку сложность растет с увеличением количества ключевых кадров, при их выборе следует избегать ненужной избыточности.
Сильная сетевая конфигурация ключевых кадров и точек для получения точных результатов, то есть хорошо распределенный набор ключевых кадров, наблюдающих точки со значительным параллаксом и с большим количеством совпадений замыкания цикла.
Первоначальная оценка положений ключевых кадров и местоположений точек для нелинейной оптимизации.
Локальная карта в исследовании, где оптимизация направлена ​​на достижение масштабируемости.
Возможность выполнять быструю глобальную оптимизацию (например, граф позы) для закрытия циклов в реальном времени.
Первым применением BA в реальном времени была работа Mouragon et. al. [ 3 ], за которой последовала новаторская работа Кляйна и Мюррея по SLAM [ 4 ], известная как Parallel Tracking and Mapping (PTAM). Этот алгоритм, хотя и ограничен мелкомасштабными операциями, предоставляет простые, но эффективные методы для выбора ключевых кадров, сопоставления функций, точечной триангуляции, локализации камеры для каждого кадра и перемещения после сбоя отслеживания. К сожалению, несколько факторов серьезно ограничивают его применение: отсутствие закрытия цикла и адекватной обработки окклюзий, низкая инвариантность с точки зрения перемещения и необходимость вмешательства человека для начальной загрузки карты.
В этой работе мы опираемся на основные идеи PTAM, работу по распознаванию мест Гальвеса-Лопеса и Тардоса [ 5 ], замыкание цикла с учетом масштаба, выполненное Strasdat et. al [ 6 ] и использование информации о совместимости для крупномасштабных операций [ 7 , 8 ] для разработки с нуля ORBSLAM, новой монокулярной системы SLAM, основные вклады которой:
 Использование одних и тех же функций для всех задач: отслеживание, отображение, перемещение и закрытие цикла. Это делает нашу систему более эффективной, простой и надежной. Мы используем функции ORB [ 9 ], которые позволяют работать в реальном времени без графических процессоров, обеспечивая хорошую инвариантность к изменениям точки обзора и освещения.
Работа в реальном времени в больших средах. Благодаря использованию графа совместимости, отслеживание и отображение сосредоточены в локальной видимой области, независимо от размера глобальной карты.
Закрытие цикла в реальном времени на основе оптимизации графа позы, который мы называем Essential Graph . Он построен из остовного дерева, поддерживаемого системой, ссылок замыкания цикла и сильных ребер из графа ковидимости.
Перемещение камеры в реальном времени со значительной инвариантностью к точке обзора и освещению. Это позволяет восстановиться после сбоя отслеживания, а также улучшает повторное использование карты.
Новая автоматическая и надежная процедура инициализации, основанная на выборе модели, которая позволяет создавать начальную карту плоских и неплоских сцен.
Выживание наиболее приспособленного подхода к карте точки и ключевому кадру выбора , который щедр в нересте , но весьма ограничительный в забое. Эта политика улучшает надежность отслеживания и увеличивает срок службы, поскольку избыточные ключевые кадры отбрасываются.
Мы представляем обширную оценку в популярных общедоступных наборах данных для внутренней и внешней среды, включая ручные, автомобильные и роботизированные последовательности. Примечательно, что мы достигаем более высокой точности локализации камеры, чем современные методы в прямых методах [ 10 ], которые оптимизируют непосредственно по интенсивности пикселей вместо ошибок перепроецирования признаков. Мы включаем обсуждение в Раздел IX-B возможных причин, которые могут сделать методы, основанные на функциях, более точными, чем прямые методы.
Представленные здесь методы закрытия и перемещения цикла основаны на нашей предыдущей работе [ 11 ]. Предварительная версия системы представлена ​​в [ 12 ]. В этой статье мы добавляем метод инициализации Essential Graph и совершенствуем все задействованные методы. Мы также подробно описываем все строительные блоки и проводим исчерпывающую экспериментальную проверку.
Насколько нам известно, это наиболее полное и надежное решение для монокулярного SLAM, и в интересах сообщества мы публикуем исходный код. Демонстрационные видеоролики и код можно найти на веб-странице нашего проекта.



СВЯЗАННЫХ С РАБОТОЙ

 II-A ПРИЗНАНИЕ МЕСТА
Обзор Williams et al. [ 13 ] сравнили несколько подходов к распознаванию места и пришли к выводу, что методы, основанные на внешнем виде, то есть сопоставление изображения с изображением, лучше масштабируются в больших средах, чем методы «карта-карта» или «изображение-карта». Среди методов, основанных на внешнем виде, на передний план выходят методы набора слов [ 14 ], такие как вероятностный подход FAB-MAP [ 15 ], из-за их высокой эффективности. DBoW2 [ 5 ] впервые использовал пакеты двоичных слов, полученные из дескрипторов BRIEF [ 16 ], вместе с очень эффективным детектором признаков FAST [ 17 ]. Это сократило более чем на порядок время, необходимое для извлечения признаков, по сравнению с функциями SURF [ 18 ] и SIFT [ 19 ], которые до сих пор использовались в подходах к пакетам слов. Хотя система продемонстрировала свою очень эффективную и надежную работу, использование BRIEF, не зависящее от вращения или масштаба, ограничивало систему траекториями в плоскости и обнаружением петель с аналогичных точек зрения. В нашей предыдущей работе [ 11 ] мы предложили пакет распознавания места слов, построенный на DBoW2 с ORB [ 9 ]. ORB - это двоичные функции, инвариантные к вращению и масштабированию (в определенном диапазоне), что приводит к очень быстрому распознаванию с хорошей инвариантностью к точке обзора. Мы продемонстрировали высокую отзывчивость и надежность распознавателя в четырех различных наборах данных, которым требуется менее 39 мс (включая извлечение признаков) для извлечения кандидата в цикл из базы данных изображений размером 10К. В этой работе мы используем улучшенную версию этого распознавателя мест, использующую информацию о видимости и возвращающую несколько гипотез при запросе к базе данных, а не только наилучшее совпадение.
 II-B ИНИЦИАЛИЗАЦИЯ КАРТЫ
Монокуляр SLAM требует процедуры для создания начальной карты, потому что глубина не может быть восстановлена ​​из одного изображения. Один из способов решения проблемы - изначально отслеживать известную структуру [ 20 ]. В контексте подходов к фильтрации точки могут быть инициализированы с высокой неопределенностью по глубине, используя параметризацию обратной глубины [ 21 ], которая, как мы надеемся, позже сойдется к их реальным положениям. Недавняя полу-плотная работа Engel et al. [ 10 ], следует аналогичному подходу, инициализируя глубину пикселей случайным значением с высокой дисперсией.
Методы инициализации из двух видов либо предполагают локальную планарность сцены [ 4 , 22 ], либо восстанавливают относительную позу камеры из гомографии с использованием метода Faugeras et. al [ 23 ], или вычислить существенную матрицу [ 24 , 25 ], которая моделирует плоские и общие сцены, используя пятибалльный алгоритм Нистера [ 26 ], который требует иметь дело с несколькими решениями. Оба метода реконструкции плохо ограничиваются при низком параллаксе и страдают от двоякой неоднозначности решения, если все точки плоской сцены находятся ближе к одному из центров камеры [ 27 ]. С другой стороны, если неплоская сцена видна с параллаксом, уникальная фундаментальная матрица может быть вычислена с помощью алгоритма из восьми точек [ 2 ], и относительная поза камеры может быть восстановлена ​​без двусмысленности.
В разделе IV мы представляем новый автоматический подход, основанный на выборе модели между гомографией для плоских сцен и фундаментальной матрицей для неплоских сцен. Статистический подход к выбору модели был предложен Torr et al. [ 28 ]. Исходя из аналогичных соображений, мы разработали эвристический алгоритм инициализации, который учитывает риск выбора фундаментальной матрицы в случаях, близких к вырожденным (т.е. планарная, почти планарная и с низким параллаксом), в пользу выбора гомографии. В плоском случае в целях безопасности мы воздерживаемся от инициализации, если решение имеет двоякую неоднозначность, поскольку может быть выбрано поврежденное решение. Мы откладываем инициализацию до тех пор, пока метод не даст уникальное решение со значительным параллаксом.
 II-C МОНОКУЛЯРНЫЙ УДАР
Монокулярный SLAM изначально был решен с помощью фильтрации [ 20 , 29 , 30 , 21 ]. При таком подходе каждый кадр обрабатывается фильтром для совместной оценки местоположения объектов на карте и положения камеры. Он имеет недостатки, заключающиеся в бесполезной трате вычислений при обработке последовательных кадров с небольшим количеством новой информации и накоплении ошибок линеаризации. С другой стороны, подходы на основе ключевых кадров [ 3 , 4 ] оценивают карту, используя только выбранные кадры (ключевые кадры), что позволяет выполнять более дорогостоящую, но точную оптимизацию настройки пакетов, поскольку отображение не привязано к частоте кадров. Strasdat et. [ 31 ] продемонстрировал, что методы, основанные на ключевых кадрах, более точны, чем фильтрация, при тех же вычислительных затратах.
Наиболее представительной системой SLAM на основе ключевых кадров, вероятно, является PTAM Кляйна и Мюррея [ 4 ]. Это была первая работа, в которой была представлена ​​идея разделения отслеживания и отображения камеры в параллельных потоках, и она продемонстрировала свою успешность для приложений дополненной реальности в реальном времени в небольших средах. Первоначальная версия была позже улучшена за счет функций ребер, шага оценки вращения во время отслеживания и лучшего метода перемещения [ 32 ]. Точки карты PTAM соответствуют углам FAST, сопоставленным с помощью корреляции фрагментов. Это делает точки полезными только для отслеживания, но не для распознавания места. Фактически, PTAM не обнаруживает большие петли, и перемещение основано на корреляции миниатюр ключевых кадров с низким разрешением, что обеспечивает низкую инвариантность к точке обзора.
Strasdat et. [ 6 ] представили крупномасштабную монокулярную систему SLAM с интерфейсом, основанным на оптическом потоке, реализованном на графическом процессоре, за которым следуют согласование функций FAST и BA только с движением , и внутренняя часть, основанная на BA скользящего окна. Замыкание петель было решено с помощью оптимизации графа позы с ограничениями сходства (7DoF), что позволило скорректировать дрейф масштаба, появляющийся в монокулярном SLAM.
Из этой работы мы берем идею закрытия цикла с помощью оптимизации графа позы 7DoF и применяем ее к Essential Graph, определенному в
Раздел III-D
Strasdat et. al [ 7 ] использовал интерфейс PTAM, но выполнял отслеживание только на локальной карте, полученной из графа ковидимости. Они предложили серверную часть оптимизации двойного окна, которая непрерывно выполняет BA во внутреннем окне и создает график во внешнем окне ограниченного размера. Однако закрытие цикла эффективно только в том случае, если размер внешнего окна достаточно велик, чтобы охватить весь цикл. В нашей системе мы используем превосходные идеи использования локальной карты, основанной на совмещаемости, и построения графа поз на основе графа совидимости, но применяем их в полностью переработанном интерфейсе и на стороне интерфейса. Другое отличие состоит в том, что вместо использования определенных функций для обнаружения петель (SURF) мы выполняем распознавание места для тех же отслеживаемых и сопоставленных функций, получая надежную перераспределение частоты кадров и обнаружение петель.
Pirker et. Аль [ 33 ] предложил CD-SLAM, очень полную систему, включающую замыкание цикла, перемещение по локализации, крупномасштабные операции и усилия по работе с динамическими средами. Однако инициализация карты не упоминается. Отсутствие общедоступной реализации не позволяет нам проводить сравнение точности, надежности или крупномасштабных возможностей.
Визуальная одометрия Song et al. [ 34 ] использует функции ORB для отслеживания и серверную часть BA с временным скользящим окном. Для сравнения, наша система является более общей, поскольку в них нет глобального перемещения, закрытия цикла и повторного использования карты. Они также используют известное расстояние от камеры до земли, чтобы ограничить смещение шкалы монокуляра.
Lim et. al [ 25 ], работа, опубликованная после того, как мы представили нашу предварительную версию этой работы [ 12 ], также использует те же функции для отслеживания, отображения и обнаружения петель. Однако выбор BRIEF ограничивает систему траекториями в плоскости. Их система отслеживает только точки из последнего ключевого кадра, поэтому карта не используется повторно при повторном посещении (аналогично визуальной одометрии) и имеет проблему неограниченного роста.
Мы качественно сравниваем наши результаты с этим подходом в разделе VIII-E .
Недавняя работа Engel et. [ 10 ], известный как LSD-SLAM, способен строить крупномасштабные полу-плотные карты, используя прямые методы (т. е. оптимизацию непосредственно по интенсивности пикселей изображения) вместо групповой настройки по функциям. Их результаты очень впечатляют, поскольку система способна работать в реальном времени, без ускорения графического процессора, создавая полу-плотную карту с большим количеством потенциальных приложений для робототехники, чем разреженный вывод, генерируемый функционально-ориентированным SLAM. Тем не менее, им по-прежнему нужны функции для обнаружения петель, и их точность определения местоположения камеры значительно ниже, чем в нашей системе и PTAM, как мы экспериментально показали в Разделе VIII-B . Этот удивительный результат обсуждается в разделе IX-B .
На полпути между прямым и функциональным методами находится полупрямая визуальная одометрия SVO Forster et al. [ 22 ]. Не требуя извлечения элементов из каждого кадра, они могут работать с высокой частотой кадров, получая впечатляющие результаты в квадракоптерах.
Однако обнаружение петель не выполняется, и текущая реализация в основном предназначена для камер, смотрящих вниз.
Наконец, мы хотим обсудить выбор ключевых кадров. Все работы по визуальному SLAM в литературе согласны с тем, что выполнение BA со всеми точками и всеми кадрами невозможно. Работа Strasdat et al. [ 31 ] показали, что наиболее экономичный подход - сохранить как можно больше точек, сохраняя только неизбыточные ключевые кадры. Подход PTAM заключался в очень осторожной вставке ключевых кадров, чтобы избежать чрезмерного роста вычислительной сложности. Эта ограничительная политика вставки ключевых кадров приводит к сбою отслеживания в сложных условиях исследования. Наша стратегия выживания наиболее приспособленных обеспечивает беспрецедентную надежность в сложных сценариях за счет максимально быстрой вставки ключевых кадров и последующего удаления избыточных кадров во избежание дополнительных затрат.


III               СИСТЕМНЫЙ ОБЗОР

Рис. 1: Обзор системы ORB-SLAM, показывающий все шаги, выполняемые потоками отслеживания, локального сопоставления и закрытия цикла. Также показаны основные компоненты модуля распознавания мест и карта.
 III-A ВЫБОР ОСОБЕННОСТИ
Одна из основных дизайнерских идей в нашей системе заключается в том, что те же функции, которые используются при отображении и отслеживании, используются для распознавания места, чтобы выполнить перемещение частоты кадров и обнаружение петель. Это делает нашу систему эффективной и избавляет от необходимости интерполировать глубину признаков распознавания по признакам, близким к SLAM, как в предыдущих работах [ 6 , 7 ]. Нам требуются функции, для которых требуется извлечение гораздо меньше 33 мс на изображение, за исключением популярных SIFT (~ 300 мс) [ 19 ], SURF (~ 300 мс) [ 18 ] или недавнего A-KAZE (~ 100 мс) [ 35 ]. Чтобы получить общие возможности распознавания мест, нам требуется инвариантность вращения, которая исключает BRIEF [ 16 ] и LDB [ 36 ].
Мы выбрали ORB [ 9 ], которые ориентированы на многомасштабные углы FAST с соответствующим 256-битным дескриптором. Их очень быстро вычислить и сопоставить, но при этом они хорошо инвариантны к точке обзора. Это позволяет сопоставлять их с широких базовых линий, повышая точность БА. Мы уже показали хорошую производительность ORB для распознавания мест в [ 11 ]. Хотя наша текущая реализация использует ORB, предлагаемые методы не ограничиваются этими функциями.
 III-B ТРИ НИТИ: ОТСЛЕЖИВАНИЕ, ЛОКАЛЬНОЕ КАРТИРОВАНИЕ И ЗАКРЫТИЕ ПЕТЛИ
Наша система (см. Обзор на рис. 1) включает три потока, которые выполняются параллельно: отслеживание, локальное сопоставление и закрытие цикла. Отслеживание отвечает за локализацию камеры для каждого кадра и решение, когда вставлять новый ключевой кадр. Сначала мы выполняем первоначальное сопоставление характеристик с предыдущим кадром и оптимизируем позу с помощью BA только с движением . Если отслеживание потеряно (например, из-за окклюзии или резких движений), модуль распознавания места используется для выполнения глобального перемещения. После первоначальной оценки положения камеры и сопоставления характеристик извлекается локальная видимая карта с использованием графа видимости ключевых кадров, поддерживаемого системой, см. Рис. 2 (a) и рис. 2 (b) . Затем выполняется поиск совпадений с местными точками карты путем перепроецирования, и положение камеры снова оптимизируется со всеми совпадениями. Наконец, поток отслеживания решает, вставлен ли новый ключевой кадр. Все отслеживающие шаги подробно описаны в разделе V . Новая процедура создания исходной карты представлена ​​в Разделе IV .
Локальное отображение обрабатывает новые ключевые кадры и выполняет локальную BA для достижения оптимальной реконструкции в окружении позы камеры. Новые соответствия для несогласованного ORB в новом ключевом кадре ищутся в связанных ключевых кадрах в графе ковидимости для триангуляции новых точек. Через некоторое время после создания на основе информации, собранной во время отслеживания, применяется строгая политика отбраковки точек, чтобы сохранить только точки высокого качества. Локальное сопоставление также отвечает за отбраковку избыточных ключевых кадров.
Мы подробно объясняем все этапы локального сопоставления в Разделе VI .
Замыкание цикла ищет петли с каждым новым ключевым кадром. Если петля обнаружена, мы вычисляем преобразование подобия, которое сообщает о дрейфе, накопленном в петле. Затем выравниваются обе стороны петли и соединяются дублированные точки. Наконец, выполняется оптимизация графа позы с учетом ограничений подобия [ 6 ] для достижения глобальной согласованности. Основное новшество заключается в том, что мы выполняем оптимизацию над Essential Graph , более разреженным подграфом графа ковидимости, который объясняется в Разделе III-D . Этапы обнаружения и исправления петель подробно описаны в Разделе VII .
Мы используем алгоритм Левенберга-Марквардта, реализованный в g2o [ 37 ], для выполнения всех оптимизаций. В Приложении мы описываем условия ошибок, функции затрат и переменные, участвующие в каждой оптимизации.
III-C ТОЧКИ КАРТЫ, КЛЮЧЕВЫЕ КАДРЫ И ИХ ВЫБОР Каждая точка карты p i хранит:
Его трехмерное положение X w , i в мировой системе координат.
Направление обзора n i , которое является средним единичным вектором всех его направлений обзора (лучи, которые соединяют точку с оптическим центром ключевых кадров, которые ее наблюдают).
Репрезентативный дескриптор ORB D i , который является ассоциированным дескриптором ORB, расстояние Хэмминга которого минимально по сравнению со всеми другими ассоциированными дескрипторами в ключевых кадрах, в которых наблюдается точка.
Максимальное d max и минимальное d min расстояния, на которых можно наблюдать точку, в соответствии с пределами масштабной инвариантности функций ORB.
Каждый ключевой кадр K i хранит:
Поза камеры T iw , которая представляет собой преобразование твердого тела, которое преобразует точки из мира в систему координат камеры.
Характеристики камеры, включая фокусное расстояние и главную точку.
Все объекты ORB, извлеченные в кадре, связанные или не связанные с точкой карты, координаты которой не искажаются, если предоставляется модель искажения.
Точки карты и ключевые кадры создаются с помощью обширной политики, в то время как более поздний очень требовательный механизм отбраковки отвечает за обнаружение избыточных ключевых кадров и неправильно сопоставленных или не отслеживаемых точек карты. Это позволяет гибко расширять карту во время исследования, что повышает надежность отслеживания в жестких условиях (например, вращение, быстрое перемещение), в то время как ее размер ограничен при постоянных пересмотрах в одну и ту же среду, то есть на протяжении всей жизни. Вдобавок наши карты содержат очень мало выбросов по сравнению с PTAM за счет меньшего количества точек. Процедуры отбраковки точек карты и ключевых кадров объясняются в разделах VI-B и VI-E соответственно.

а)  Ключевые кадры (синий), текущая камера (зеленый), точки карты (черный, красный), текущая (c) Spanning Tree (зеленый) и Loop
(б) График Covisibility Graph (d) Существенный график
 Местные MapPoints (красные) Закрытие (красный)
Рис. 2: Реконструкция и графики в последовательности fr3_long_office_household из теста TUM RGB-D [ 38 ] .
III-D           ГРАФИК СОВМЕСТИМОСТИ И ОСНОВНОЙ ГРАФИК
Информация о доступности между ключевыми кадрами очень полезна в нескольких задачах нашей системы и представлена ​​в виде неориентированного взвешенного графа, как в [ 7 ]. Каждый узел является ключевым кадром, а край между двумя ключевыми кадрами существует, если они совместно используют наблюдения одних и тех же точек карты (не менее 15), причем вес θ края является количеством общих точек карты.
Чтобы исправить цикл, мы выполняем оптимизацию графа позы [ 6 ], которая распределяет ошибку закрытия цикла по графу. Чтобы не включать все ребра, предоставляемые графом ковидимости, который может быть очень плотным, мы предлагаем построить Essential Graph, который сохраняет все узлы (ключевые кадры), но меньше ребер, сохраняя при этом сильную сеть, дающую точные результаты. Система постепенно строит связующее дерево из начального ключевого кадра, которое обеспечивает связанный подграф графа совместимости с минимальным количеством ребер. Когда вставляется новый ключевой кадр, он включается в дерево, связанное с ключевым кадром, который разделяет большинство точечных наблюдений, а когда ключевой кадр стирается политикой отбраковки, система обновляет ссылки, затронутые этим ключевым кадром. В
Essential Graph содержит остовное дерево, подмножество ребер из графа совместимости с высокой совмещаемостью (θ min = 100 ) и ребра замыкания цикла, что приводит к сильной сети камер. На рис. 2 показан пример графа совместимости, остовного дерева и связанного с ним существенного графа. Как показано в экспериментах Раздела VIII-E , при выполнении оптимизации графа позы решение настолько точное, что дополнительная оптимизация полной настройки связки практически не улучшает решение. Эффективность основного графика и влияние θ min показаны в конце Раздела VIII-E .
III-E            СУМКИ СЛОВА РАСПОЗНАВАНИЕ МЕСТА
В систему встроен модуль распознавания мест слов, основанный на DBoW2 [ 5 ], для обнаружения петель и
перебазирование. Визуальные слова - это просто дискретизация пространства дескрипторов, известная как визуальный словарь. Словарь создается в автономном режиме с дескрипторами ORB, извлеченными из большого набора изображений. Если изображения достаточно общие, один и тот же словарь может использоваться для разных сред, обеспечивая хорошую производительность, как показано в нашей предыдущей работе [ 11 ]. Система строит
постепенно база данных, содержащая инвертированный индекс, в котором для каждого визуального слова в словаре хранятся ключевые кадры, в которых оно было замечено, так что запросы к базе данных могут выполняться очень эффективно. База данных также обновляется, когда ключевой кадр удаляется процедурой отбраковки.
Поскольку существует визуальное перекрытие между ключевыми кадрами, при запросе к базе данных не будет существовать уникальный ключевой кадр с высоким баллом. Исходный DBoW2 учел это перекрытие, суммируя количество изображений, близких по времени. Это ограничение не включает ключевые кадры, просматривающие одно и то же место, но вставленные в другое время. Вместо этого мы группируем те ключевые кадры, которые связаны в графе совместимости. Кроме того, наша база данных возвращает все совпадения ключевых кадров, оценка которых превышает 75 % наилучшего результата.
О дополнительном преимуществе представления пакетов слов для сопоставления признаков было сообщено в [ 5 ]. Когда мы хотим вычислить соответствия между двумя наборами функций ORB, мы можем ограничить сопоставление методом грубой силы только теми функциями, которые принадлежат одному и тому же узлу в словарном дереве на определенном уровне (мы выбираем второй из шести), ускоряя вверх по поиску. Мы используем этот трюк при поиске совпадений для триангуляции новых точек, а также при обнаружении петель и перемещении. Мы также уточняем соответствия с помощью теста согласованности ориентации, см. Подробности в [ 11 ], который отбрасывает выбросы, обеспечивая согласованное вращение для всех соответствий.


IV АВТОМАТИЧЕСКАЯ ИНИЦИАЛИЗАЦИЯ КАРТЫ


Цель инициализации карты - вычислить относительную позу между двумя кадрами для триангуляции начального набора точек карты. Этот метод не должен зависеть от сцены (плоской или общей) и не требует вмешательства человека для выбора хорошей конфигурации с двумя ракурсами, то есть конфигурации со значительным параллаксом. Мы предлагаем вычислить параллельно две геометрические модели, гомографию, предполагающую плоскую сцену, и фундаментальную матрицу, предполагающую неплоскую сцену. Затем мы используем эвристику для выбора модели и пытаемся восстановить относительную позу с помощью определенного метода для выбранной модели. Наш метод инициализируется только тогда, когда он уверен, что конфигурация с двумя представлениями безопасна, обнаруживая случаи низкого параллакса и хорошо известную двукратную плоскую неоднозначность [ 27 ], избегая инициализации поврежденной карты. Шаги нашего алгоритма:
    1. Найдите начальные соответствия:
Извлеките объекты ORB (только в самом мелком масштабе) в текущем кадре F c и найдите совпадения x c ↔ x r в опорном кадре F r . Если найдено недостаточно совпадений, сбросьте опорный кадр.
    2. Параллельное вычисление двух моделей:
Вычислить в параллельных потоках гомографию H cr и фундаментальную матрицу F cr :
 x c = H c r (1)
х г
с нормализованным алгоритмом DLT и 8-точечным алгоритмом соответственно, как описано в [ 2 ] внутри схемы RANSAC. Чтобы сделать процедуру однородной для обеих моделей, количество итераций указывается в качестве префикса и одинаково для обеих моделей, а также точки, которые будут использоваться на каждой итерации: 8 для фундаментальной матрицы и 4 из них для гомографии. На каждой итерации мы вычисляем оценку S M для каждой модели M ( H для гомографии, F для фундаментальной матрицы):
Γ - d 2, если
 ∑ 0 d 2 < T M (2)
S M = i ( M ( d 2 cr ( x ci , x ir , M )) + ρ M ( d 2 rc ( x ci , x ir , M ))) ρ M ( d 2 ) = {если 2
d ≥ T M
где d 2 cr и d 2 rc - симметричные ошибки передачи [ 2 ] от одного кадра к другому. T M - это порог отбрасывания выбросов, основанный на тесте χ 2 при 95% ( T H = 5,99 , T F = 3,84 , при условии, что стандартное отклонение ошибки измерения составляет 1 пиксель). Γ определяется равным T H, так что обе модели получают одинаковое значение d в своей начальной области, опять же, чтобы сделать процесс однородным.
Мы сохраняем гомографию и фундаментальную матрицу с наивысшим баллом. Если модель не может быть найдена (недостаточно вставок), мы снова перезапускаем процесс с шага 1.
    3. Выбор модели:
Если сцена плоская, почти плоская или имеется низкий параллакс, это можно объяснить гомографией. Однако фундаментальная матрица также может быть найдена, но проблема плохо ограничена [ 2 ], и любая попытка восстановить движение из фундаментальной матрицы приведет к неверным результатам. Мы должны выбрать гомографию, так как метод реконструкции будет правильно инициализироваться с плоскости, или он обнаружит случай низкого параллакса и откажется от инициализации. С другой стороны, неплоская сцена с достаточным параллаксом может быть объяснена только с помощью фундаментальной матрицы, но можно также найти гомографию, объясняющую подмножество совпадений, если они лежат на плоскости или имеют низкий параллакс (они далеко ). В этом случае следует выбрать фундаментальную матрицу. Мы обнаружили, что надежная эвристика предназначена для вычисления:
 R H = S H (3)
S H + S F
и выберите гомографию, если R H > 0,45 , что адекватно отражает случаи плоского и низкого параллакса. В противном случае мы выбираем фундаментальную матрицу.
4. Движение и структура после восстановления движения:
После выбора модели мы извлекаем связанные с ней гипотезы движения. В случае гомографии мы получаем 8 гипотез движения, используя метод Faugeras et. al [ 23 ]. Метод предлагает тесты на жизнеспособность для выбора действительного решения. Однако эти тесты не проходят при низком параллаксе, поскольку точки легко проходят перед или за камерой, что может привести к выбору неправильного решения. Мы предлагаем провести прямую триангуляцию восьми решений и проверить, существует ли одно решение, в котором большинство точек видно с параллаксом, перед обеими камерами и с низкой ошибкой перепроецирования. Если нет явного решения-победителя, мы не инициализируем и продолжаем с шага 1. Этот метод устранения неоднозначности решений делает нашу инициализацию устойчивой в условиях низкого параллакса и конфигурации двоякой неоднозначности и может считаться ключом к надежности нашего метода. .
В случае фундаментальной матрицы мы преобразуем ее в существенную матрицу, используя калибровочную матрицу K:
 E r c = K T (4)
F r c
K
а затем получить 4 гипотезы движения с помощью метода разложения по сингулярным числам, описанного в [ 2 ]. Мы триангулируем
четыре решения и выберите реконструкцию, как это сделано для омографии.
5. Регулировка связки:
Наконец, мы выполняем полную БА , подробности см. В Приложении, чтобы уточнить первоначальную реконструкцию.
Пример сложной инициализации в последовательности открытого робота NewCollege [ 39 ] показан на рис. 3 . Можно увидеть, как PTAM и LSD-SLAM инициализировали все точки на плоскости, в то время как наш метод ждал, пока не будет достаточного параллакса, правильно инициализировавшись из фундаментальной матрицы.
V                 ОТСЛЕЖИВАНИЕ
В этом разделе мы описываем шаги потока отслеживания, которые выполняются с каждым кадром с камеры. Оптимизация позы камеры, упомянутая в нескольких шагах, состоит в BA только движения , которая описана в Приложении.
 VA ИЗВЛЕЧЕНИЕ ШАРА
Мы извлекаем углы БЫСТРО на 8 масштабных уровнях с коэффициентом масштабирования 1,2. Для разрешений изображения от 512 × 384 до 752 × 480 пикселей мы нашли подходящими для извлечения 1000 углов, для более высоких разрешений, поскольку 1241 × 376 в наборе данных KITTI [ 40 ] мы извлекаем 2000 углов. Чтобы обеспечить однородное распределение, мы делим каждый масштабный уровень в сетке, пытаясь выделить как минимум 5 углов на ячейку. Затем мы обнаруживаем углы в каждой ячейке, адаптируя порог детектора, если обнаружено недостаточно углов. Количество углов, сохраняемых на ячейку, также адаптируется, если некоторые ячейки не содержат углов (без текстуры или с низким контрастом). Затем для сохраненных углов FAST вычисляются ориентация и дескриптор ORB. Дескриптор ORB используется при сопоставлении всех функций, в отличие от поиска по корреляции патчей в PTAM.

Рис. 3: Вверху: PTAM, средний LSD-SLAM, внизу: ORB-SLAM, через некоторое время после инициализации в последовательности NewCollege [ 39 ] . PTAM и LSD-SLAM инициализируют поврежденное планарное решение, в то время как наш метод автоматически инициализируется из фундаментальной матрицы, когда он обнаруживает достаточный параллакс. В зависимости от того, какие ключевые кадры выбраны вручную, PTAM также может хорошо инициализироваться.
 VB ПЕРВОНАЧАЛЬНАЯ ОЦЕНКА ПОЗИЦИИ ИЗ ПРЕДЫДУЩЕГО КАДРА
Если отслеживание было успешным для последнего кадра, мы используем модель движения с постоянной скоростью, чтобы предсказать положение камеры и выполнить управляемый поиск точек карты, наблюдаемых в последнем кадре. Если найдено недостаточно совпадений (т.е. модель движения явно нарушена), мы используем более широкий поиск точек карты вокруг их положения в последнем кадре. Затем поза оптимизируется с учетом найденных соответствий.
 ВК ПЕРВОНАЧАЛЬНАЯ ОЦЕНКА ПОЗИЦИИ С ПОМОЩЬЮ ГЛОБАЛЬНОЙ РЕЛОКАЛИЗАЦИИ
Если отслеживание потеряно, мы преобразуем кадр в пакет слов и запрашиваем в базе данных распознавания кандидатов ключевых кадров для глобального перемещения. Мы вычисляем соответствия с ORB, связанные с точками карты в каждом ключевом кадре, как объяснено в разделе III-E . Затем мы альтернативно выполняем итерации RANSAC для каждого ключевого кадра и пытаемся найти позу камеры, используя алгоритм PnP [ 41 ]. Если мы находим позу камеры с достаточным количеством вставок, мы оптимизируем позу и выполняем управляемый поиск большего количества совпадений с точками карты кандидата ключевого кадра. Наконец, поза камеры снова оптимизирована, и, если поддерживается достаточным количеством вставок, процедура отслеживания продолжается.
 VD ПОЛЕЗНАЯ КАРТА
Как только у нас будет оценка положения камеры и начальный набор совпадений функций, мы можем спроецировать карту в кадр и искать больше соответствий точек карты. Чтобы ограничить сложность на больших картах, мы проецируем только локальную карту. Эта местная карта содержит
набор ключевых кадров K 1 , которые совместно используют точки карты с текущим кадром, и набор K 2 с соседями по ключевым кадрам K 1 в
граф ковидимости. Локальная карта также имеет опорный ключевой кадр K ref ∈ K 1, который разделяет большинство точек карты с текущим кадром. Теперь каждый
точка карты, видимая в K 1 и K 2 , ищется в текущем кадре следующим образом:
    1. Вычислить проекцию точки карты x в текущем кадре. Отменить, если он выходит за рамки изображения.
    2. Вычислите угол между текущим лучом обзора v и средним направлением обзора n точки на карте. Отбросить, если v ⋅n < cos ( 60 ∘ ) . 3. Вычислите расстояние d от точки карты до центра камеры. Отменить, если он находится за пределами области масштабной инвариантности точки карты.
d ∉ [ д мин , д макс ].
    4. Вычислите масштаб в кадре по соотношению d / d min .
    5. Сравните репрезентативный дескриптор D точки карты с все еще несопоставленными функциями ORB в кадре, в прогнозируемом масштабе и около x, и свяжите точку карты с наилучшим соответствием.
Поза камеры наконец оптимизирована со всеми точками карты, найденными в кадре.
 VE НОВОЕ РЕШЕНИЕ КЛЮЧЕВОГО КАДРА
Последний шаг - решить, будет ли текущий кадр порожден как новый ключевой кадр. Поскольку в локальном сопоставлении есть механизм для отсеивания избыточных ключевых кадров, мы постараемся вставлять ключевые кадры как можно быстрее, потому что это делает отслеживание более устойчивым к сложным движениям камеры, обычно поворотам. Чтобы вставить новый ключевой кадр, должны быть выполнены все следующие условия:
    1. С момента последнего глобального перемещения должно пройти более 20 кадров.
    2. Локальное сопоставление неактивно или с момента вставки последнего ключевого кадра прошло более 20 кадров.
    3. Текущий кадр отслеживает не менее 50 точек.
    4. Текущий кадр отслеживает менее 90% точек, чем K исх .
Вместо использования критерия расстояния до других ключевых кадров в качестве PTAM мы вводим минимальное визуальное изменение (условие 4). Условие 1 обеспечивает хорошее перемещение, а условие 3 - хорошее отслеживание. Если ключевой кадр вставлен, когда локальное сопоставление занято (вторая часть условия 2), отправляется сигнал, чтобы остановить настройку локального пакета, чтобы он мог как можно скорее обработать новый ключевой кадр.


VI ЛОКАЛЬНАЯ КАРТА


В этом разделе мы описываем шаги, выполняемые локальным отображением с каждым новым ключевым кадром K i .
 С ПОМОЩЬЮ ВСТАВКА КЛЮЧЕВОГО КАДРА
Сначала мы обновляем граф ковидимости, добавляя новый узел для K i и обновляя края, полученные в результате общих точек карты, с другими ключевыми кадрами. Затем мы обновляем связующее дерево, связывающее K i с ключевым кадром с большинством общих точек. Затем мы вычисляем пакеты слов, представляющие ключевой кадр, которые помогут в ассоциации данных для триангуляции новых точек.
 VI-B ПОСЛЕДНИЕ ТОЧКИ КАРТЫ УДАЛЕНИЕ
Для того, чтобы точки карты сохранялись на карте, они должны пройти ограничительный тест в течение первых трех ключевых кадров после создания, который гарантирует, что они отслеживаются и не подвергаются ошибочной триангуляции, т. Е. Из-за ложной ассоциации данных. Очко должно соответствовать этим двум условиям:
    1. Отслеживание должно найти точку более чем в 25% кадров, в которых она должна быть видна.
    2. Если после создания точки карты прошло более одного ключевого кадра, он должен наблюдаться по крайней мере из трех ключевых кадров.
После того, как точка на карте прошла этот тест, ее можно удалить только в том случае, если в любой момент она наблюдается менее чем из трех ключевых кадров. Это может произойти, когда ключевые кадры отбираются и когда локальная настройка пакета отбрасывает выбросы. Благодаря этой политике наша карта содержит очень мало выбросов.
VI-C           СОЗДАНИЕ НОВОЙ ТОЧКИ КАРТЫ
Новые точки карты создаются путем триангуляции ORB из связанных ключевых кадров K c в графе совместимости. Для каждого несовпадающего ORB в K i мы ищем совпадение с другой несогласованной точкой в ​​другом ключевом кадре. Это сопоставление выполняется, как описано в разделе III-E, и отбрасываются те совпадения, которые не соответствуют эпиполярному ограничению. Пары ORB триангулируются, и для принятия новых точек проверяются положительная глубина в обеих камерах, параллакс, ошибка перепроецирования и согласованность масштаба. Первоначально точка на карте наблюдается из двух ключевых кадров, но она может быть сопоставлена ​​в других, поэтому она проецируется в остальных связанных ключевых кадрах, а соответствия ищутся, как подробно описано в разделе VD .
VI-D          НАСТРОЙКА ЛОКАЛЬНОГО ПАКЕТА
Локальная BA оптимизирует настоящее время обработанного ключевого кадра K я , все ключевые кадры , подключенные к нему в covisibility графа K с , и все точки на карте , замеченные этих ключевых кадров. Все другие ключевые кадры, которые видят эти точки, но не связаны с текущим обрабатываемым ключевым кадром, включаются в оптимизацию, но остаются фиксированными. Наблюдения, отмеченные как выбросы, отбрасываются в середине и в конце оптимизации. См. Приложение для более подробной информации об этой оптимизации.
VI-E           ЛОКАЛЬНАЯ ОТМЕНА КЛЮЧЕВЫХ КАДРОВ
Чтобы сохранить компактную реконструкцию, локальное сопоставление пытается обнаружить избыточные ключевые кадры и удалить их. Это полезно, поскольку сложность настройки пакета растет с увеличением количества ключевых кадров, но также и потому, что это позволяет работать в течение всей жизни в той же среде, поскольку количество ключевых кадров не будет неограниченно расти, если только визуальный контент в сцене не изменится. Мы отбрасываем все ключевые кадры в K c , 90% точек карты которых были замечены по крайней мере в трех других ключевых кадрах в том же или более мелком масштабе. Условие масштабирования гарантирует, что точки карты поддерживают ключевые кадры, по которым они измеряются с наибольшей точностью. Эта политика была вдохновлена ​​политикой, предложенной в работе Tan et. al [ 24 ], где ключевые кадры были отброшены после процесса обнаружения изменений.
VII             ЗАКРЫТИЕ ПЕТЛИ
Поток закрытия цикла принимает K i , последний ключевой кадр, обработанный локальным отображением, и пытается обнаружить и закрыть циклы. Далее описываются шаги.
 VII-A ОБНАРУЖЕНИЕ КАНДИДАТОВ ПЕТЛИ
Сначала мы вычисляем сходство между вектором мешка слов для K i и всеми его соседями в графе совместимости (θ min = 30 ) и сохраняем наименьшее значение s min . Затем мы запрашиваем базу данных распознавания и отбрасываем все те ключевые кадры, оценка которых ниже s min . Это аналогичная операция для повышения устойчивости, что и нормализующий балл в DBoW2, который вычисляется из предыдущего изображения, но здесь мы используем информацию о совместимости. Вдобавок все эти ключевые кадры, напрямую связанные с K i , исключаются из результатов. Чтобы принять кандидата в цикл, мы должны последовательно обнаружить три согласованных кандидата в цикл (ключевые кадры, соединенные в графе ковидимости). Может быть несколько кандидатов в петли, если есть несколько мест, внешний вид которых похож на K i .
 VII-B ВЫЧИСЛИТЕ ПРЕОБРАЗОВАНИЕ ПОДОБИЯ
В монокулярном SLAM есть семь степеней свободы, в которых карта может дрейфовать, три перевода, три поворота и масштабный коэффициент [ 6 ]. Следовательно, чтобы закрыть цикл, нам необходимо вычислить преобразование подобия из текущего ключевого кадра K i в ключевой кадр цикла K l, который сообщает нам об ошибке, накопленной в цикле. Вычисление этого подобия будет также служить геометрической проверкой петли.
Сначала мы вычисляем соответствия между ORB, связанным с точками карты в текущем ключевом кадре, и ключевыми кадрами-кандидатами в цикл, следуя процедуре, описанной в разделе III-E . На данный момент у нас есть 3D-соответствия для каждого кандидата в петли.
В качестве альтернативы мы выполняем итерации RANSAC с каждым кандидатом, пытаясь найти преобразование подобия, используя метод Хорна.
[ 42 ]. Если мы находим подобие S il с достаточным количеством подстановок, мы оптимизируем его (см. Приложение) и выполняем управляемый поиск большего количества соответствий. Мы оптимизируем его снова, и, если S il поддерживается достаточным количеством инициаторов, цикл с K l принимается.
 VII-C Слияние петель
Первым шагом в исправлении цикла является объединение дублированных точек карты и вставка новых ребер в граф видимости, которые присоединят замыкание цикла. Сначала текущая поза T iw ключевого кадра корректируется с помощью преобразования подобия S il, и эта коррекция распространяется на всех соседей K i , объединяя преобразования, так что обе стороны цикла выравниваются. Все точки карты, видимые ключевым кадром цикла и его соседями, проецируются в K i и его соседей, а совпадения ищутся в узкой области вокруг проекции, как это сделано в разделе VD . Все эти совпадающие точки карты и те, которые использовались при вычислении S il, объединяются. Все ключевые кадры, участвующие в слиянии, обновят свои ребра в графе совместимости, эффективно создав ребра, которые присоединяют замыкание цикла.
 VII-D НЕОБХОДИМАЯ ОПТИМИЗАЦИЯ ГРАФОВ
Чтобы эффективно замкнуть цикл, мы выполняем оптимизацию графа позы над Essential Graph , описанным в Разделе III-D , который распределяет ошибку закрытия цикла по графу. Оптимизация выполняется по преобразованиям подобия, чтобы исправить дрейф масштаба [ 6 ]. Условия ошибок и функция стоимости подробно описаны в Приложении. После оптимизации каждая точка карты преобразуется в соответствии с коррекцией одного из ключевых кадров, который ее наблюдает.
VIII           ЭКСПЕРИМЕНТЫ
Мы выполнили обширную экспериментальную проверку нашей системы в большой последовательности роботов NewCollege [ 39 ], оценивая общую производительность системы, в 16 ручных внутренних последовательностях теста TUM RGB-D [ 38 ], оценивая локализацию точность, перемещение и возможности на протяжении всей жизни, а также в 10 сценах автомобилей вне помещения из набора данных KITTI [ 40 ], оценивающих крупномасштабные операции в реальном времени, точность локализации и эффективность оптимизации графа позы.
Наша система работает в режиме реального времени и обрабатывает изображения точно с той частотой кадров, с которой они были получены. Мы проводили все эксперименты с Intel Core i7-4700MQ (4 ядра с частотой 2,40 ГГц) и 8 ГБ оперативной памяти. ORB-SLAM имеет три основных потока, которые выполняются параллельно с другими задачами из ROS и операционной системы, что вносит некоторую случайность в результаты. По этой причине в некоторых экспериментах мы приводим медианное значение для нескольких прогонов.

VIII-A ПРОИЗВОДИТЕЛЬНОСТЬ СИСТЕМЫ В НАБОРЕ ДАННЫХ NEWCOLLEGE
Набор данных NewCollege [ 39 ] содержит последовательность 2,2 км от робота, пересекающего кампус и прилегающие парки. Последовательность записывается стереокамерой со скоростью 20 кадров в секунду и разрешением 512 × 382 . Он содержит несколько петель и быстрых поворотов, что делает последовательность довольно сложной для монокулярного зрения. Насколько нам известно, в литературе нет другой монокулярной системы, способной обработать всю эту последовательность. Например, Strasdat et al. [ 7 ], несмотря на то, что он мог замкнуть петли и работать в крупномасштабных средах, показал монокулярные результаты только для небольшой части этой последовательности.

ТАБЛИЦА I: Отслеживание и отображение времени в NewCollege

ТАБЛИЦА II: Время закрытия петель в NewCollege
Рис. 4: Пример петли, обнаруженной в последовательности NewCollege. Мы проводим внутренние соответствия, подтверждающие найденное преобразование подобия.

Рис. 5: Карта до и после закрытия цикла в последовательности NewCollege. Соответствие замыкания контура отображается синим цветом, траектория - зеленым, а местная карта для отслеживания в этот момент - красным. После закрытия локальная карта расширяется по обе стороны петли.
В качестве примера нашей процедуры закрытия цикла мы показываем на рис. 4 обнаружение цикла со вставками, которые поддерживают преобразование подобия. На рис. 5 показана реконструкция до и после замыкания петли. Красным цветом показана локальная карта, которая после замыкания петли распространяется по обеим сторонам замыкания петли. Вся карта после обработки полной последовательности с ее реальной частотой кадров показана на рисунке 6 . Большая петля справа не идеально выровнена, потому что она проходила в противоположных направлениях, и распознаватель места не смог найти замыкания петли.

Мы извлекли статистику времени, затраченного каждым потоком в этом эксперименте. В таблице I показаны результаты отслеживания и локального сопоставления. Отслеживание работает с частотой кадров 25–30 Гц, что является наиболее сложной задачей для отслеживания локальной карты. При необходимости это время можно уменьшить, ограничив количество ключевых кадров, включаемых в локальную карту. В потоке локального сопоставления наиболее сложной задачей является настройка локального пакета. Местное BA время меняется , если робот изучает или в хорошо сопоставленных области, потому что во время регулировки пучка разведочного прерывается , если отслеживание вставляет новый ключевой кадр, как описано в разделе VE . В случае, если новые ключевые кадры не нужны, настройка локального пакета выполняет большое количество итераций с префиксом.
В таблице II показаны результаты для каждого из 6 найденных замыканий контура. Можно увидеть, как обнаружение петли сублинейно увеличивается с количеством ключевых кадров. Это связано с эффективными запросами к базе данных, которые сравнивают только подмножество изображений с общими словами, что демонстрирует потенциал набора слов для распознавания места. Наш Essential Graph включает рёбра примерно в 5 раз больше, чем количество ключевых кадров, что является довольно разреженным графом.

Рис. 6: ORB-SLAM реконструкция полной последовательности NewCollege. Большая петля справа пересечена в противоположных направлениях, и не было обнаружено видимых замыканий петель, поэтому они не совпадают идеально.
 VIII-B ТОЧНОСТЬ ЛОКАЛИЗАЦИИ В ЭТАЛОНЕ TUM RGB-D
Тест TUM RGB-D [ 38 ] представляет собой отличный набор данных для оценки точности локализации камеры, так как он предоставляет несколько последовательностей с точными наземными данными, полученными с помощью внешней системы захвата движения. Мы отказались от всех тех последовательностей, которые, по нашему мнению, не подходят для чисто монокулярных систем SLAM, поскольку они содержат сильные вращения, отсутствие текстуры или движения.
Для сравнения мы также выполнили новый, прямой, полуплотный LSD-SLAM [ 10 ] и PTAM [ 4 ] в тесте. Мы также сравниваем с траекториями, генерируемыми RGBD-SLAM [ 43 ], которые представлены для некоторых последовательностей на веб-сайте тестов. Чтобы сравнить ORB-SLAM, LSD-SLAM и PTAM с наземной истиной, мы выравниваем траектории ключевых кадров, используя преобразование подобия, поскольку масштаб неизвестен, и измеряем абсолютную ошибку траектории (ATE) [ 38 ]. В случае RGBD-SLAM мы выравниваем траектории с помощью преобразования твердого тела, а также подобия, чтобы проверить, хорошо ли восстановлен масштаб. LSD-SLAM инициализируется из случайных значений глубины и требует времени для схождения, поэтому мы отбросили первые 10 ключевых кадров при сравнении с наземной истиной. Для PTAM мы вручную выбрали два кадра, из которых мы получаем хорошую инициализацию. В таблице III показаны средние результаты по 5 выполнениям в каждой из 16 выбранных последовательностей.
Видно, что ORB-SLAM может обрабатывать все последовательности, кроме fr3_nostructure_texture_far (fr3_nstr_tex_far). Это планарная сцена, которая из-за траектории камеры относительно плоскости имеет две возможные интерпретации, то есть двоякую неоднозначность, описанную в [ 27 ]. Наш метод инициализации обнаруживает двусмысленность и в целях безопасности отказывается от инициализации. PTAM инициализируется, выбирая иногда истинное решение, а иногда - поврежденное, и в этом случае ошибка недопустима. Мы не заметили двух разных реконструкций из LSD-SLAM, но ошибка в этой последовательности очень велика. В остальных последовательностях PTAM и LSDSLAM демонстрируют меньшую надежность, чем наш метод, теряя трек в восьми и трех последовательностях соответственно.
С точки зрения точности ORB-SLAM и PTAM аналогичны в открытых траекториях, в то время как ORB-SLAM обеспечивает более высокую точность при обнаружении больших петель, как в последовательности fr3 _ nostructure _ texture _ near _ withloop (fr3_nstr_tex_near). Самый удивительный результат заключается в том, что и PTAM, и ORB-SLAM явно более точны, чем LSD-SLAM и RGBD-SLAM. Одна из возможных причин может заключаться в том, что они сводят оптимизацию карты к оптимизации графа позы, когда измерения сенсора отбрасываются, в то время как мы выполняем групповую настройку и совместно оптимизируем камеры и сопоставление с измерениями сенсоров, что является золотым стандартом алгоритма для решения структуры из движение [ 2 ]. Мы обсудим этот результат более подробно в разделе IX-B . Другой интересный результат заключается в том, что LSD-SLAM кажется менее устойчивым к динамическим объектам, чем наша система, как видно из fr2_desk_with_person и fr3_walking_xyz .
Мы заметили, что RGBD-SLAM имеет смещение в масштабе в последовательностях fr2 , так как выравнивание траекторий с 7 степенями свободы значительно снижает ошибку. Наконец, следует отметить, что Engel et al. [ 10 ] сообщил, что PTAM имеет меньшую точность, чем LSD-SLAM в fr2_xyz с RMSE 24,28 см. Однако в статье недостаточно подробностей о том, как были получены эти результаты, и мы не смогли их воспроизвести.
 
Абсолютная среднеквадратичная траектория ключевого кадра (см)

Результаты для ORB-SLAM, PTAM и LSD-SLAM представляют собой среднее значение более 5 выполнений в каждой последовательности. Траектории 7DoF были согласованы с истиной на земле. Траектории для RGBD-SLAM взяты с веб-сайта тестов, доступны только для последовательностей fr1 и fr2, и выровнены с 6DoF и 7DoF (результаты в скобках). X означает, что отслеживание в какой-то момент потеряно, и значительная часть последовательности не обрабатывается системой.
ТАБЛИЦА III: Сравнение ошибок локализации ключевых кадров в тесте TUM RGB-D [ 38 ]


 VIII-C ПЕРЕЛОКАЛИЗАЦИЯ В ЭТАЛОНЕ TUM RGB-D

Мы проводим два эксперимента по перемещению в тесте TUM RGB-D. В первом эксперименте мы строим карту с первыми 30 секундами последовательности fr2_xyz и выполняем глобальную релокализацию с каждым последующим кадром и оцениваем точность восстановленных поз. Мы проводим тот же эксперимент с PTAM для сравнения. На рис. 7 показаны ключевые кадры, используемые для создания исходной карты, позы перемещенных кадров и наземная истина для этих кадров. Можно видеть, что PTAM может перемещать только те кадры, которые находятся рядом с ключевыми кадрами, из-за небольшой инвариантности его метода перемещения. Таблица IV показывает отзыв и ошибку по отношению к истине. ORB-SLAM точно перемещает более двух кадров, чем PTAM. Во втором эксперименте мы создаем исходную карту с последовательностью fr3_sitting_xyz и пытаемся переместить все кадры из fr3_walking_xyz . Это сложный эксперимент, так как есть большие окклюзии из-за движущихся по сцене людей. Здесь PTAM не находит перемещений, в то время как наша система перемещает 78% фреймов, как можно увидеть в Таблице IV . На рис. 8 показаны некоторые примеры сложных перемещений, выполненных нашей системой в этих экспериментах.
Рис. 7: Эксперимент по перемещению в fr2_xyz. Карта изначально создается в течение первых 30 секунд последовательности (KF). Цель состоит в том, чтобы переместить последующие кадры. Показаны успешные перемещения (R) нашей системы и PTAM. Наземная истина (GT) отображается только для кадров, которые нужно переместить.


Рис. 8: Пример сложных перемещений (резкое изменение масштаба, динамические объекты), которые наша система успешно обнаружила в экспериментах по перемещению.
 
Начальная карта
Перебазирование
Система
KFs
RMSE
(см)


ТАБЛИЦА IV: Результаты экспериментов по перемещению


 VIII-D НЕПРЕРЫВНЫЙ ЭКСПЕРИМЕНТ В ЭТАЛОНЕ TUM RGB-D

Рис. 9: Пожизненный эксперимент в статической среде, где камера всегда смотрит в одно и то же место с разных точек зрения. PTAM всегда вставляет ключевые кадры, в то время как ORBSLAM может сокращать избыточные ключевые кадры и поддерживает карту ограниченного размера.
(б) Создание и уничтожение ключевых кадров. Каждая горизонтальная линия (c) Гистограмма времени выживания всех порожденных ключевых кадров (a) Изменение количества ключевых кадров на карте соответствует ключевому кадру, от его кадра создания до его относительно оставшегося времени разрушения эксперимента                            
Рис. 10: Пожизненный эксперимент в динамической среде из теста TUM RGB-D Benchmark.
Предыдущие эксперименты по перемещению показали, что наша система способна локализоваться на карте с самых разных точек обзора и надежно при умеренных динамических изменениях. Это свойство в сочетании с нашей процедурой отбора ключевых кадров позволяет работать в течение всей жизни в одной и той же среде с разными точками зрения и некоторыми динамическими изменениями.
В случае полностью статического сценария наша система может поддерживать ограниченное количество ключевых кадров, даже если камера смотрит на сцену с разных точек обзора. Мы демонстрируем это в настраиваемой последовательности, где камера смотрит на тот же стол в течение 93 секунд, но выполняет траекторию, так что точка обзора всегда меняется. Сравним изменение числа ключевых кадров в нашей карте и, генерируемые ПТАМ на рис. 9 . Можно увидеть, как PTAM всегда вставляет ключевые кадры, в то время как наш механизм сокращения избыточных ключевых кадров заставляет их количество увеличиваться.
Хотя непрерывная работа в статическом сценарии должна быть требованием любой системы SLAM, более интересным является случай, когда происходят динамические изменения. Мы анализируем поведение нашей системы в таком сценарии, последовательно выполняя динамические последовательности из fr3 : sit_xyz , sit_halfsphere , sit_rpy , walking_xyz , walking_halfspehere и walking_rpy . Во всех эпизодах камера фокусируется на одном столе, но движется по разным траекториям, в то время как люди движутся и меняют некоторые объекты, например стулья. Рис. 10 (a) показывает эволюцию общего количества ключевых кадров на карте, а рис. 10 (b) показывает для каждого ключевого кадра его кадр создания и уничтожения, показывая, как долго ключевые кадры сохраняются на карте. Видно, что во время первых двух последовательностей размер карты увеличивается, так как все виды сцены видны впервые. На рис. 10 (b) мы можем видеть, что несколько ключевых кадров, созданных во время этих двух первых последовательностей, сохраняются на карте в течение всего эксперимента. Во время последовательностей sit_rpy и walking_xyz карта не растет, потому что созданная до сих пор карта хорошо объясняет сцену. Напротив, во время последних двух последовательностей вставляется больше ключевых кадров, показывая, что в сцене есть некоторые новинки, которые еще не были представлены, вероятно, из-за динамических изменений. Наконец, на рис. 10 (c) показана гистограмма ключевых кадров в зависимости от времени, в течение которого они выжили, по отношению к оставшемуся времени последовательности с момента ее создания. Можно видеть, что большинство ключевых кадров уничтожаются процедурой отбраковки вскоре после создания, и только небольшое подмножество доживает до конца эксперимента. С одной стороны, это показывает, что наша система имеет обширную политику создания ключевых кадров, которая очень полезна при выполнении резких движений при исследовании. С другой стороны, система в конечном итоге может выбрать небольшое репрезентативное подмножество этих ключевых кадров.
В этих экспериментах на протяжении всей жизни мы показали, что наша карта растет вместе с содержимым сцены, но не со временем, и что она способна хранить динамические изменения сцены, которые могут быть полезны для понимания сцены путем накопления опыта в окружающей среде. .
 VIII-E БОЛЬШОЙ МАСШТАБ И БОЛЬШОЕ ЗАКРЫТИЕ ПЕТЛИ В НАБОРЕ KITTI DATASET

Рис. 11: Последовательности 00, 05 и 07 из эталонного теста одометрии набора данных KITTI. Слева: точки и траектория ключевого кадра. В центре: траектория и наземная правда. Справа: траектория после 20 итераций полного БА. Вывод нашей системы довольно точен, хотя его можно немного улучшить с помощью некоторых итераций BA.

 (а) Последовательность 02 (б) Последовательность 03 (c) Последовательность 04 (d) Последовательность 06 (e) Последовательность 08 (f) Последовательность 09 (г) 
Рис. 12: Траектории ключевых кадров ORB-SLAM в последовательностях 02, 03, 04, 06, 08, 09 и 10 из эталонного теста одометрии набора данных KITTI. Последовательность 08 не содержит петель и дрейф (особенно масштаб) не исправляется.

Тест одометрии из набора данных KITTI [ 40 ] содержит 11 последовательностей, снятых автомобилем, проезжающим по жилому району, с точными данными GPS и лазерного сканера Velodyne. Это очень сложный набор данных для монокулярного зрения из-за быстрого вращения, участков с большим количеством листвы, которые затрудняют сопоставление данных, и относительно высокой скорости автомобиля, поскольку последовательности записываются со скоростью 10 кадров в секунду. Мы воспроизводим последовательности с реальной частотой кадров, с которой они были записаны, и ORB-SLAM может обрабатывать все последовательности, за исключением последовательности 01, которая представляет собой шоссе с несколькими отслеживаемыми близкими объектами. Последовательности 00, 02, 05, 06, 07, 09 содержат циклы, которые были правильно обнаружены и закрыты нашей системой. Последовательность 09 содержит цикл, который может быть обнаружен только в нескольких кадрах в конце последовательности, и наша система не всегда обнаруживает его (предоставленные результаты относятся к выполнениям, в которых он был обнаружен).
Качественные сравнения наших траекторий и наземную истины показаны на рис. 11 и рис. 12 . Как и в тесте TUM RGB-D, мы выровняли траектории ключевых кадров нашей системы и основную истину с помощью преобразования подобия. Мы можем качественно сравнить наши результаты с рис. 11 и рис. 12 с результатами, полученными для последовательностей 00, 05, 06, 07 и 08 недавним монокулярным методом SLAM Лим и др. al [ 25 ] на рисунке 10. ORB-SLAM производит явно более точные траектории для всех этих последовательностей за исключением последовательности 08, в которой они, кажется, страдают меньшим дрейфом.
В таблице V показана средняя среднеквадратичная ошибка траектории ключевого кадра за пять выполнений в каждой последовательности. Мы также предоставляем размеры карт, чтобы выявить ошибки. Результаты показывают, что наша система очень точна, поскольку ошибка траектории обычно составляет около 1% от ее размеров, иногда меньше, как в последовательности 03 с ошибкой 0,3% или выше, как в последовательности 08 с 5%. В последовательности 08 нет петель, и дрейф не может быть исправлен, что делает очевидной необходимость замыкания петель для достижения точных реконструкций.
 
ORB-SLAM


ТАБЛИЦА V: Результаты нашей системы в наборе данных KITTI.
В этом эксперименте мы также проверили, насколько можно улучшить реконструкцию, выполнив 20 итераций полной BA , подробности см. В Приложении в конце каждой последовательности. Мы заметили, что некоторые итерации полного BA немного улучшают точность траекторий с петлями, но это оказывает незначительное влияние на открытые траектории, что означает, что выходные данные нашей системы уже очень точны. В любом случае, если требуются наиболее точные результаты, наш алгоритм предоставляет набор совпадений, которые определяют сильную сеть камер, и первоначальное предположение, так что полный BA сходится за несколько итераций.
Наконец, мы хотели показать эффективность нашего подхода к замыканию цикла и влияние θ min, используемого для включения ребер в основной граф. Мы выбрали последовательность 09 (очень длинную последовательность с закрытием цикла в конце), и в одном и том же исполнении мы оценили разные стратегии закрытия цикла. В таблице VI мы показываем среднеквадратичную траекторию ключевого кадра и время, затраченное на оптимизацию в различных случаях: без закрытия цикла, если мы напрямую применяем полный BA (20 или 100 итераций), если мы применяем только оптимизацию графа позы (10 итераций с разными количество ребер), и если мы применим затем оптимизацию графа поз и полную BA . Результаты ясно показывают, что до закрытия цикла решение настолько далеко от оптимального, что у BA возникают проблемы сходимости. Даже после 100 итераций ошибка очень высока. С другой стороны, существенная оптимизация графа показывает быструю сходимость и более точные результаты. Можно видеть, что выбор θ min не оказывает существенного влияния на точность, но, уменьшая количество фронтов, можно значительно сократить время. Выполнение дополнительной BA после оптимизации графа позы немного повышает точность, при этом существенно увеличивая время.

В первой строке показаны результаты без закрытия цикла. Число в скобках для BA (Bundle Adjustment) означает количество итераций LevenbergMarquardt (LM), а для EG (Essential Graph) - это θ min для построения Essential Graph. Все оптимизации EG выполняют 10 итераций LM.
ТАБЛИЦА VI: Сравнение стратегий закрытия петель в KITTI 09

 (а) Без замыкания контура (б) БА (20) (в) EG (100) (г) EG (100) + BA (20)
Рис.13: Сравнение различных стратегий закрытия петель в KITTI 09.
IX               ВЫВОДЫ И ОБСУЖДЕНИЕ
 IX-A ВЫВОДЫ
В этой работе мы представили новую монокулярную систему SLAM с подробным описанием ее строительных блоков и исчерпывающей оценкой в ​​общедоступных наборах данных. Наша система продемонстрировала, что она может обрабатывать последовательности сцен в помещении и на улице, а также движения автомобиля, робота и рук. Точность системы обычно составляет менее 1 см в небольших помещениях и несколько метров в больших сценариях на открытом воздухе (после того, как мы выровняли шкалу с истинностью на земле).
В настоящее время PTAM Клейна и Мюррея [ 4 ] считается наиболее точным методом SLAM для монокулярного видео в реальном времени. Неслучайно бэкэнд PTAM - это настройка пакетов, которая, как хорошо известно, является золотым стандартом для автономной проблемы структуры из движения [ 2 ]. Одним из главных успехов PTAM и более ранней работы Mouragnon [ 3 ] было привнесение этих знаний в сообщество SLAM робототехники и демонстрация их производительности в реальном времени. Главный вклад нашей работы состоит в расширении универсальности PTAM в средах, которые не поддаются обработке для этой системы. Чтобы достичь этого, мы разработали с нуля новую монокулярную систему SLAM с некоторыми новыми идеями и алгоритмами, но также включили в себя отличные работы, разработанные за последние несколько лет, такие как обнаружение петель Гальвеса-Лопеса и Тардоса [ 5 ], петли процедура закрытия и граф совместимости Strasdat et.al [ 7 , 6 ], оптимизационная структура g2o от Kuemmerle et. al [ 37 ] и особенности ORB Rubble et. al [ 9 ]. Насколько нам известно, ни одна другая система не продемонстрировала свою работоспособность в таком количестве различных сценариев и с такой точностью. Поэтому наша система в настоящее время является наиболее надежным и полным решением для монокулярного SLAM. Наша новая политика создания и отбраковки ключевых кадров позволяет создавать ключевые кадры каждые несколько кадров, которые в конечном итоге удаляются, если они считаются избыточными. Это гибкое расширение карты действительно полезно в плохо обусловленных траекториях исследования, то есть близко к чистому вращению или быстрому перемещению. При многократной работе в одной и той же среде карта увеличивается только в том случае, если визуальное содержимое сцены изменяется, сохраняя историю ее различных визуальных проявлений.
Интересные результаты для долгосрочного картирования можно получить, анализируя эту историю.
Наконец, мы также продемонстрировали, что функции ORB обладают достаточной способностью распознавания, чтобы обеспечить распознавание места при серьезном изменении точки зрения. Более того, они настолько быстро извлекаются и сопоставляются (без необходимости многопоточности или ускорения графического процессора), что обеспечивает точное отслеживание и отображение в реальном времени.
 IX-B РАЗНООБРАЗНЫЙ / НА ОСНОВЕ ФУНКЦИЙ VS. ПЛОТНЫЕ / ПРЯМЫЕ МЕТОДЫ
Современные алгоритмы SLAM для монокуляров в реальном времени, такие как DTAM [ 44 ] и LSD-SLAM [ 10 ], могут выполнять плотные или полуплотные реконструкции окружающей среды, в то время как камера локализуется путем оптимизации непосредственно по интенсивности пикселей изображения. Эти прямые подходы не требуют извлечения признаков и, таким образом, позволяют избежать соответствующих артефактов. Они также более устойчивы к размытию, среде с низкой текстурой и высокочастотной текстуре, такой как асфальт [ 45 ]. Их более плотные реконструкции, по сравнению с разреженной точечной картой нашей системы или PTAM, могли бы быть более полезными для других задач, чем просто локализация камеры.
Однако у прямых методов есть свои ограничения. Во-первых, эти методы предполагают модель отражательной способности поверхности, которая в реальных сценах создает свои собственные артефакты. Фотометрическая согласованность ограничивает базовую линию совпадений, обычно более узкую, чем позволяют характеристики. Это имеет большое влияние на точность реконструкции, которая требует обширных базовых наблюдений для уменьшения неопределенности глубины. Прямые методы, если они не смоделированы правильно, в значительной степени подвержены влиянию артефактов скользящего затвора, автоусиления и автоэкспозиции (как в тесте TUM RGB-D Benchmark). Наконец, поскольку прямые методы, как правило, очень требовательны к вычислениям, карта просто постепенно расширяется, как в DTAM, или оптимизация карты сводится к графу поз, отбрасывая все измерения датчиков, как в LSD-SLAM.
Напротив, методы, основанные на признаках, могут сопоставлять объекты с широкой базовой линией благодаря их хорошей инвариантности к изменениям точки обзора и освещения. Регулировка связки совместно оптимизирует позы камеры и указывает на измерения сенсора. В контексте оценки структуры и движения Торр и Зиссерман [ 46 ] уже указали на преимущества методов, основанных на признаках, по сравнению с прямыми методами. В этой работе мы предоставляем экспериментальные доказательства (см. Раздел VIII-B ) превосходной точности основанных на функциях методов в SLAM в реальном времени. Мы считаем, что будущее монокулярного SLAM должно включать лучшее из обоих подходов.




IX-C БУДУЩАЯ РАБОТА


Точность нашей системы еще можно улучшить, добавив в отслеживание бесконечно удаленных точек. Эти точки, которые не видны с достаточным параллаксом и которые наша система не включает в карту, очень информативны для вращения камеры [ 21 ].
Другой открытый способ - обновить разреженную карту нашей системы до более плотной и полезной реконструкции. Благодаря нашему выбору ключевых кадров, ключевые кадры представляют собой компактную сводку окружающей среды с очень высокой точностью позы и богатой информацией о видимости. Поэтому разреженная карта ORB-SLAM может быть отличной начальной догадкой и каркасом, поверх которого может быть построена плотная и точная карта сцены. Первые попытки в этом направлении представлены в [ 47 ].
[Нелинейные оптимизации]
  Регулировка связки (BA) [ 1 ]:
Расположение точек на карте X w , j ∈ R 3 и положения ключевого кадра T iw ∈ SE (3) , где w обозначает мировую ссылку, оптимизированы, минимизируя ошибку перепроецирования по отношению к согласованным ключевым точкам x i , j ∈ R 2 . Член ошибки для наблюдения точки j карты в ключевом кадре i :
 e i , j = x i , j −π i (T iw , X w , j ) (5)
где π i - проекционная функция:
(6)
где R iw ∈ SO (3) и t iw ∈ R 3 - соответственно части поворота и сдвига T iw , а ( f i , u , f i , v ) и ( c i , u , c i , v ) - фокусное расстояние и основная точка камеры i . Функция стоимости, которую необходимо минимизировать, составляет:
 ∑ т −1 (7)
C = i , j ρ h (e i , j Ω i , j e i , j ), где ρ h - робастная функция стоимости Хубера, а Ω i , j = σ 2 i , j I 2 × 2 - ковариационная матрица, ассоциированная в масштабе, в котором была обнаружена ключевая точка. В случае полного BA (используется при инициализации карты, описанной в Разделе IV и в экспериментах в Разделе VIII-E ) мы оптимизируем все точки и ключевые кадры, за исключением первого ключевого кадра, который остается фиксированным в качестве источника. В локальном BA (см. Раздел VI-D ) все точки, включенные в локальную область, оптимизированы, в то время как подмножество ключевых кадров фиксировано. При оптимизации позы или BA только с движением (см. Раздел V ) все точки фиксируются, и оптимизируется только поза камеры.
  Оптимизация поз-графа над Sim (3) Ограничения [ 6 ]:
Учитывая граф поз двоичных ребер (см. Раздел VII-D ), мы определяем ошибку на ребре как:
 e i , j = log Sim (3) (S ij (8)
S jw
−1
 S )
где S ij - относительное преобразование Sim (3) между обоими ключевыми кадрами, вычисленное из поз SE (3) непосредственно перед оптимизацией графа позы и установкой масштабного коэффициента равным 1. В случае края замыкания цикла это относительное преобразование вычисляется с помощью метод Хорна [ 42 ]. Журнал Sim3 [ 48 ] преобразуется в касательное пространство, так что ошибка является вектором в R 7 . Цель состоит в том, чтобы оптимизировать позы ключевых кадров Sim (3), минимизируя функцию стоимости:
 ∑ т (9)
C = i , j (e i , j Λ i , j e i , j )
где Λ i , j - информационная матрица ребра, которую, как и в [ 48 ], мы устанавливаем равной единице. Мы фиксируем ключевой кадр замыкания петли, чтобы зафиксировать 7 степеней свободы шкалы. Хотя этот метод является грубым приближением полного BA , мы экспериментально демонстрируем в Разделе VIII-E, что он имеет значительно более быструю и лучшую сходимость, чем BA.
  Relative Sim (3) Оптимизация:
Учитывая набор из n совпадений i ⇒ j (ключевых точек и связанных с ними точек трехмерной карты) между ключевым кадром 1 и ключевым кадром 2, мы хотим оптимизировать относительное преобразование Sim (3) S 12 (см. Раздел VII-B ), которое минимизирует ошибку перепроецирования. на обоих изображениях:
 e 1 = x 1, i −π 1 (S 12 , X 2, j ) e 2 = x 2, j −π 2 (S −121 , X 1, i ) (10)
а функция стоимости, которую необходимо минимизировать, равна:
(11)
C
где Ω 1, i и Ω 2, i - ковариационные матрицы, связанные с масштабом, в котором были обнаружены ключевые точки на изображениях 1 и 2. В этой оптимизации точки фиксированы.
ИСПОЛЬЗОВАННАЯ ЛИТЕРАТУРА